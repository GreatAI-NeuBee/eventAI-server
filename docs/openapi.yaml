openapi: 3.0.3
info:
  title: Event AI Server API
  description: |
    A comprehensive REST API for the Event AI platform that handles event management, 
    AI-powered crowd simulation, and real-time notifications.
    
    ## Architecture
    - **Server**: Express.js on AWS EC2
    - **Database**: Supabase PostgreSQL  
    - **Storage**: AWS S3
    - **AI**: Amazon SageMaker
    - **Notifications**: n8n + WhatsApp Business API
    
    ## Authentication
    Currently using API key authentication. Future versions will include JWT.
    
    ## Rate Limiting
    - DISABLED - No rate limiting applied for development
    
    ## Response Format
    All responses follow a consistent format:
    ```json
    {
      "success": true|false,
      "data": {...},
      "message": "Optional message",
      "error": "Error details if success=false"
    }
    ```
  version: 1.0.0
  contact:
    name: Event AI Team
    email: support@eventai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://your-domain.com
    description: Production server
  - url: https://staging.your-domain.com
    description: Staging server

paths:
  /:
    get:
      summary: Root endpoint
      description: Returns basic server information
      tags:
        - System
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Event AI Server"
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"
                  timestamp:
                    type: string
                    format: date-time

  /health:
    get:
      summary: Health check endpoint
      description: Returns server health status and metrics
      tags:
        - System
      responses:
        '200':
          description: Server health information
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "1.0.0"
                  environment:
                    type: string
                    example: "development"
                  uptime:
                    type: number
                    description: Server uptime in seconds
                    example: 3600
                  memoryUsage:
                    type: object
                    properties:
                      rss:
                        type: number
                        description: Resident Set Size
                      heapTotal:
                        type: number
                        description: Total heap size
                      heapUsed:
                        type: number
                        description: Used heap size
                      external:
                        type: number
                        description: External memory usage

  /api/v1/users:
    post:
      summary: Create a new user
      description: Creates a new user account with validation
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User email address
                  example: "john.doe@example.com"
                username:
                  type: string
                  minLength: 3
                  maxLength: 255
                  description: Username (defaults to email if not provided)
                  example: "john.doe@example.com"
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE, SUSPENDED, PENDING]
                  description: User status
                  example: "ACTIVE"
                phone:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
                  description: Phone number in international format (optional)
                  example: "+1234567890"
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Conflict - Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Email already exists"
                  code: "DUPLICATE_RESOURCE"
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get all users
      description: Retrieves a paginated list of users with optional filtering
      tags:
        - Users
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by user status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, SUSPENDED, PENDING]
        - name: search
          in: query
          description: Search in email and username
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/{userId}:
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
            pattern: '^usr_[a-zA-Z0-9-]+$'
            example: "usr_123456789"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update user
      description: Updates an existing user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
                  minLength: 3
                  maxLength: 255
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE, SUSPENDED, PENDING]
                phone:
                  type: string
                  pattern: '^\+?[1-9]\d{1,14}$'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User updated successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Conflict - Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete user
      description: Deletes a user account
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'


  /api/v1/users/statistics:
    get:
      summary: Get user statistics
      description: Retrieves statistical overview of users
      tags:
        - Users
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/UserStatistics'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/email/{email}:
    get:
      summary: Get user by email
      description: Retrieves a user by their email address
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          description: User email
          schema:
            type: string
            format: email
            example: "john.doe@example.com"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/users/username/{username}:
    get:
      summary: Get user by username
      description: Retrieves a user by their username
      tags:
        - Users
      parameters:
        - name: username
          in: path
          required: true
          description: Username
          schema:
            type: string
            pattern: '^[A-Za-z0-9_-]{3,30}$'
            example: "john_doe"
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events:
    post:
      summary: Create a new event
      description: Creates a new event with optional file uploads for ticketing data and seating charts
      tags:
        - Events
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - venue
                - expectedAttendees
                - eventDate
                - eventType
              properties:
                name:
                  type: string
                  description: Event name
                  example: "Summer Music Festival 2024"
                description:
                  type: string
                  description: Event description
                  example: "Annual outdoor music festival featuring top artists"
                venue:
                  type: string
                  description: Event venue
                  example: "Central Park"
                expectedAttendees:
                  type: integer
                  minimum: 1
                  description: Expected number of attendees
                  example: 5000
                eventDate:
                  type: string
                  format: date-time
                  description: Event date and time
                  example: "2024-07-15T18:00:00Z"
                eventType:
                  type: string
                  enum: [CONCERT, CONFERENCE, SPORTS, FESTIVAL, OTHER]
                  description: Type of event
                  example: "FESTIVAL"
                ticketingData:
                  type: string
                  format: binary
                  description: CSV file with ticketing data
                seatingChart:
                  type: string
                  format: binary
                  description: JSON file with seating chart data
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      eventId:
                        type: string
                        example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                      simulationId:
                        type: string
                        example: "sim_123456789"
                  message:
                    type: string
                    example: "Event created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Get all events
      description: Retrieves a paginated list of events
      tags:
        - Events
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of events per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by event status
          schema:
            type: string
            enum: [CREATED, ACTIVE, COMPLETED, CANCELLED]
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      events:
                        type: array
                        items:
                          $ref: '#/components/schemas/Event'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events/{eventId}:
    get:
      summary: Get event by ID
      description: Retrieves a specific event by its ID
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Event'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update event
      description: |
        Updates an existing event with support for attachment URLs and context for AI chatbot knowledge base.
        All fields are optional - only provided fields will be updated.
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Event name
                  maxLength: 255
                  example: "Updated Concert in the Park"
                description:
                  type: string
                  description: Event description
                  maxLength: 1000
                  example: "An updated description of the concert event"
                venue:
                  type: string
                  description: Event venue
                  maxLength: 255
                  example: "Central Park Amphitheater"
                dateOfEventStart:
                  type: string
                  format: date-time
                  description: Event start date and time
                  example: "2024-07-15T18:00:00Z"
                dateOfEventEnd:
                  type: string
                  format: date-time
                  description: Event end date and time
                  example: "2024-07-15T23:00:00Z"
                status:
                  type: string
                  enum: [CREATED, ACTIVE, COMPLETED, CANCELLED]
                  description: Event status
                  example: "ACTIVE"
                venueLayout:
                  type: object
                  description: Venue layout configuration (JSON object)
                  example: {"sections": ["A", "B", "C"], "capacity": 5000}
                userEmail:
                  type: string
                  format: email
                  description: Email of the user who created the event
                  example: "user@example.com"
                attachmentUrls:
                  type: array
                  description: Array of attachment URLs for AI chatbot knowledge base
                  items:
                    type: string
                    format: uri
                    maxLength: 2048
                  example: ["https://example.com/event-plan.pdf", "https://example.com/venue-map.jpg"]
                attachmentContext:
                  type: string
                  description: Text interpretation/context of attachments for AI chatbot knowledge base
                  maxLength: 10000
                  example: "Event plan includes detailed schedule and safety protocols. Venue map shows emergency exits and first aid stations."
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Event'
                  message:
                    type: string
                    example: "Event updated successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete event
      description: Deletes an event and its associated simulation
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
      responses:
        '200':
          description: Event deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Event deleted successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events/{eventId}/uploadEventAttachments:
    post:
      summary: Upload event attachments
      description: |
        Uploads multiple files as event attachments with comprehensive AI analysis.
        
        **Supported File Types:**
        - **Text files** (.txt) - Direct text extraction with content analysis
        - **CSV files** (.csv) - Structured data extraction with analysis  
        - **Markdown** (.md) - Text extraction with structure preservation
        - **HTML** (.html, .htm) - Clean text extraction with tag removal
        - **JSON** (.json) - Structured data extraction and formatting
        - **PDF documents** (.pdf) - Full text extraction with metadata
        - **Word documents** (.docx) - Complete text extraction
        - **Excel spreadsheets** (.xlsx, .xls) - Multi-worksheet data extraction
        - **Images** (.jpg, .jpeg, .png) - OCR text extraction using AWS Textract
        
        **AI Analysis Features:**
        - Entity recognition (people, locations, organizations, dates)
        - Key phrase extraction and topic identification
        - Event relevance scoring and actionable insights
        - Comprehensive AI-ready context generation
        - Structured content analysis (tables, forms, lists)
        
        Files are stored securely in S3 with 7-day signed URLs and analyzed with AWS Comprehend and Textract.
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID to attach files to
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  description: Files to upload (up to 10 files, 50MB each)
                  items:
                    type: string
                    format: binary
                  maxItems: 10
            encoding:
              files:
                style: form
                explode: true
      responses:
        '201':
          description: Files uploaded and analyzed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      eventId:
                        type: string
                        example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                      uploadedFiles:
                        type: integer
                        description: Number of files successfully uploaded
                        example: 3
                      totalAttachments:
                        type: integer
                        description: Total number of attachments for this event
                        example: 5
                      attachmentFilenames:
                        type: array
                        description: Array of all attachment filenames for this event
                        items:
                          type: string
                        example: ["event-plan.pdf", "venue-map.jpg", "eventFlow.csv"]
                      uploads:
                        type: array
                        description: Details of uploaded files
                        items:
                          $ref: '#/components/schemas/AttachmentUpload'
                      analysis:
                        type: array
                        description: AI analysis results for each file
                        items:
                          $ref: '#/components/schemas/AttachmentAnalysis'
                      event:
                        $ref: '#/components/schemas/Event'
                  message:
                    type: string
                    example: "Successfully uploaded 3 file(s) and analyzed content"
                  warnings:
                    type: object
                    description: Present if some files failed to upload
                    properties:
                      failedFiles:
                        type: integer
                        example: 1
                      errors:
                        type: array
                        items:
                          type: object
                          properties:
                            fileName:
                              type: string
                              example: "large-file.pdf"
                            errors:
                              type: array
                              items:
                                type: string
                              example: ["File size exceeds maximum allowed size (50MB)"]
        '400':
          description: Bad request - validation errors or no files provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                no_files:
                  summary: No files provided
                  value:
                    success: false
                    error:
                      status: "fail"
                      message: "No files provided"
                      code: "NO_FILES_UPLOADED"
                all_files_failed:
                  summary: All files failed to upload
                  value:
                    success: false
                    error:
                      status: "fail" 
                      message: "All files failed to upload"
                      details: [
                        {
                          "fileName": "invalid-file.exe",
                          "errors": ["File type application/x-msdownload is not supported"]
                        }
                      ]
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Event not found"
                  code: "EVENT_NOT_FOUND"
        '413':
          description: File too large (exceeds 50MB limit)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/events/{eventId}/attachments/supported-types:
    get:
      summary: Get supported file types
      description: Returns information about supported file types and processing capabilities
      tags:
        - Events
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID (for consistency with API structure)
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Supported file types information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SupportedFileTypes'

  /api/v1/simulations/{simulationId}/trigger:
    post:
      summary: Trigger AI simulation
      description: Starts an AI simulation for crowd flow analysis
      tags:
        - Simulations
      parameters:
        - name: simulationId
          in: path
          required: true
          description: Simulation ID
          schema:
            type: string
            pattern: '^sim_[a-zA-Z0-9]+$'
            example: "sim_123456789"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                parameters:
                  type: object
                  description: Simulation parameters
                  properties:
                    crowdDensityThreshold:
                      type: number
                      minimum: 0
                      maximum: 1
                      description: Crowd density threshold (0-1)
                      example: 0.7
                    simulationDuration:
                      type: integer
                      minimum: 60
                      description: Simulation duration in seconds
                      example: 3600
                    weatherConditions:
                      type: string
                      enum: [sunny, rainy, cloudy, windy]
                      description: Weather conditions for simulation
                      example: "sunny"
                    emergencyScenario:
                      type: boolean
                      description: Include emergency scenario
                      example: false
      responses:
        '200':
          description: Simulation triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      simulationId:
                        type: string
                        example: "sim_123456789"
                      status:
                        type: string
                        example: "RUNNING"
                      startedAt:
                        type: string
                        format: date-time
                  message:
                    type: string
                    example: "Simulation started successfully"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/simulations/{simulationId}/status:
    get:
      summary: Get simulation status
      description: Retrieves the current status of a simulation
      tags:
        - Simulations
      parameters:
        - name: simulationId
          in: path
          required: true
          description: Simulation ID
          schema:
            type: string
      responses:
        '200':
          description: Simulation status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Simulation'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/simulations/{simulationId}/results:
    get:
      summary: Get simulation results
      description: Retrieves the results of a completed simulation
      tags:
        - Simulations
      parameters:
        - name: simulationId
          in: path
          required: true
          description: Simulation ID
          schema:
            type: string
      responses:
        '200':
          description: Simulation results
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      simulationId:
                        type: string
                        example: "sim_123456789"
                      status:
                        type: string
                        example: "COMPLETED"
                      results:
                        $ref: '#/components/schemas/SimulationResults'
                      completedAt:
                        type: string
                        format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: Simulation not completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                    example: "Simulation is not completed yet"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/simulations:
    get:
      summary: Get all simulations
      description: Retrieves a paginated list of simulations
      tags:
        - Simulations
      parameters:
        - name: page
          in: query
          description: Page number (1-based)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of simulations per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by simulation status
          schema:
            type: string
            enum: [PENDING, RUNNING, COMPLETED, FAILED, CANCELLED]
        - name: eventId
          in: query
          description: Filter by event ID
          schema:
            type: string
      responses:
        '200':
          description: List of simulations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      simulations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Simulation'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/forecast:
    post:
      summary: Generate crowd forecast
      description: |
        Generates crowd forecast using the new AI model endpoint.
        This endpoint calls the model at http://43.216.25.126/forecast_inout
        and saves the forecast result to the event's forecast_result field.
      tags:
        - Forecast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventid
                - gates
                - schedule_start_time
                - event_end_time
                - method_exits
                - freq
                - gates_crowd
              properties:
                eventid:
                  type: string
                  description: Event ID for which to generate the forecast
                  example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                gates:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  description: Array of gate identifiers
                  example: ["1", "2", "A"]
                schedule_start_time:
                  type: string
                  format: date-time
                  description: Schedule start time in ISO 8601 format
                  example: "2025-09-21T14:00:00"
                event_end_time:
                  type: string
                  format: date-time
                  description: Event end time in ISO 8601 format
                  example: "2025-09-21T16:00:00"
                method_exits:
                  type: string
                  description: Method for handling exits (as string)
                  example: "mirror_delay"
        freq:
          type: string
          description: Frequency for forecast intervals
          example: "5min"
        gates_crowd:
          type: array
          description: Required array of gate capacities corresponding to gates array
          items:
            type: integer
            minimum: 0
          example: [500, 300, 800]
      examples:
              standard_forecast:
                summary: Standard forecast request
                value:
                  eventid: "evt_123456789"
                  gates: ["1", "2", "A"]
                  schedule_start_time: "2025-09-21T14:00:00"
                  event_end_time: "2025-09-21T16:00:00"
                  method_exits: "mirror_delay"
                  freq: "5min"
      responses:
        '200':
          description: Forecast generated successfully. The AI model provides arrivals data (entry rush period) and exits data (departure rush period). Gaps between these periods represent stable event attendance with no rush activity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ForecastResult'
                  message:
                    type: string
                    example: "Forecast generated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Event not found"
                  code: "EVENT_NOT_FOUND"
        '503':
          description: AI model service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  status: "error"
                  message: "AI model service unavailable"
                  code: "SERVICE_UNAVAILABLE"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/forecast/legacy:
    post:
      summary: Generate forecast (Legacy endpoint)
      description: Legacy forecast endpoint that uses the original AI model structure
      tags:
        - Forecast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - eventId
              properties:
                eventId:
                  type: string
                  description: Event ID
                  example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                inputData:
                  type: object
                  description: Additional input data for forecasting
                  properties:
                    historicalData:
                      type: object
                      description: Historical data for the event
                    weatherData:
                      type: object
                      description: Weather data for forecast
                    promotionalData:
                      type: object
                      description: Promotional campaign data
                    expectedAttendance:
                      type: integer
                      minimum: 1
                      description: Expected attendance
                    ticketsSold:
                      type: integer
                      minimum: 0
                      description: Number of tickets sold
      responses:
        '200':
          description: Forecast generated successfully. The AI model provides arrivals data (entry rush period) and exits data (departure rush period). Gaps between these periods represent stable event attendance with no rush activity.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/LegacyForecastResult'
                  message:
                    type: string
                    example: "Forecast generated successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: AI model service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/forecast/{eventId}:
    get:
      summary: Get existing forecast
      description: Retrieves existing forecast for an event
      tags:
        - Forecast
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Forecast retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      eventId:
                        type: string
                        example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                      forecastResult:
                        type: object
                        description: The stored forecast result
                      lastUpdated:
                        type: string
                        format: date-time
                        description: When the forecast was last updated
        '404':
          description: Forecast not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Forecast not found for this event"
                  code: "FORECAST_NOT_FOUND"
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete forecast
      description: Deletes forecast for an event
      tags:
        - Forecast
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Forecast deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Forecast deleted successfully"
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/forecast/regenerate/{eventId}:
    post:
      summary: Regenerate forecast
      description: Regenerates forecast for an event (convenience endpoint)
      tags:
        - Forecast
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              description: Optional input data for regenerating forecast
      responses:
        '200':
          description: Forecast regenerated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/LegacyForecastResult'
                  message:
                    type: string
                    example: "Forecast regenerated successfully"
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: AI model service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/forecast/health/model:
    get:
      summary: Check legacy AI model health
      description: Checks the health status of the legacy AI model service
      tags:
        - Forecast
      responses:
        '200':
          description: Model health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      modelEndpoint:
                        type: string
                        example: "http://localhost:8080/predict"
                      isHealthy:
                        type: boolean
                        example: true
                      checkedAt:
                        type: string
                        format: date-time
                      type:
                        type: string
                        example: "legacy"
                  message:
                    type: string
                    example: "Legacy AI model service is healthy"
        '503':
          description: Model service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "error"
                      message:
                        type: string
                        example: "Unable to check legacy AI model service health"
                      code:
                        type: string
                        example: "SERVICE_UNAVAILABLE"

  /api/v1/forecast/health/new-model:
    get:
      summary: Check new AI model health
      description: Checks the health status of the new AI model service at http://43.216.25.126/forecast_inout
      tags:
        - Forecast
      responses:
        '200':
          description: Model health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      modelEndpoint:
                        type: string
                        example: "http://43.216.25.126/forecast_inout"
                      isHealthy:
                        type: boolean
                        example: true
                      checkedAt:
                        type: string
                        format: date-time
                      type:
                        type: string
                        example: "new"
                  message:
                    type: string
                    example: "New AI model service is healthy"
        '503':
          description: Model service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "error"
                      message:
                        type: string
                        example: "Unable to check new AI model service health"
                      code:
                        type: string
                        example: "SERVICE_UNAVAILABLE"

  /api/v1/prediction/{eventId}:
    post:
      summary: Generate prediction for event
      description: |
        Manually triggers a prediction for a specific event and saves the result.
        Requires the event to have a forecast_result to generate predictions from.
      tags:
        - Prediction
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID to generate prediction for
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Prediction generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PredictionResult'
                  message:
                    type: string
                    example: "Prediction generated and saved successfully"
        '400':
          description: Event does not have forecast data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Event does not have a forecast result to generate predictions from"
                  code: "NO_FORECAST_DATA"
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    get:
      summary: Get prediction result for event
      description: Retrieves the latest prediction result for a specific event
      tags:
        - Prediction
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID to get prediction for
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Prediction result retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PredictionResult'
                  message:
                    type: string
                    example: "Prediction result retrieved successfully"
        '404':
          description: Event not found or no prediction result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  status: "fail"
                  message: "No prediction result found for this event"
                  code: "NO_PREDICTION_RESULT"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/prediction/{eventId}/comparison:
    get:
      summary: Get forecast vs prediction comparison data
      description: |
        Gets formatted comparison data between forecast and prediction results for line graphs.
        Returns timeline-aligned data showing complete forecast vs growing prediction data.
      tags:
        - Prediction
      parameters:
        - name: eventId
          in: path
          required: true
          description: Event ID to get comparison data for
          schema:
            type: string
            example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
      responses:
        '200':
          description: Comparison data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/ForecastVsPredictionComparison'
                  message:
                    type: string
                    example: "Forecast vs prediction comparison data retrieved successfully"
        '400':
          description: Event must have forecast result for comparison
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  status: "fail"
                  message: "Event must have forecast_result for comparison"
                  code: "FORECAST_REQUIRED"
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/prediction/health/model:
    get:
      summary: Check prediction model health
      description: Checks the health status of the external prediction model service
      tags:
        - Prediction
      responses:
        '200':
          description: Prediction model is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      modelEndpoint:
                        type: string
                        example: "http://56.68.30.73/predict"
                      isHealthy:
                        type: boolean
                        example: true
                      checkedAt:
                        type: string
                        format: date-time
                        example: "2025-10-03T17:20:00.000Z"
                      message:
                        type: string
                        example: "Service is healthy"
                  message:
                    type: string
                    example: "Prediction model service is healthy"
        '503':
          description: Prediction model service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                error:
                  status: "error"
                  message: "Prediction model service unavailable"
                  code: "SERVICE_UNAVAILABLE"

  /api/v1/prediction/debug/events:
    get:
      summary: Debug events for prediction updates
      description: |
        Debug endpoint to see which events would be selected for prediction updates.
        Shows server time, timeline info, and which events are eligible for cron job updates.
      tags:
        - Prediction
        - Debug
      responses:
        '200':
          description: Debug information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      serverTime:
                        type: object
                        properties:
                          current:
                            type: string
                            format: date-time
                            example: "2025-10-03T17:20:00.000Z"
                          currentLocal:
                            type: string
                            example: "Fri Oct 03 2025 17:20:00 GMT+0000"
                          timezone:
                            type: string
                            example: "UTC"
                          todayStart:
                            type: string
                            format: date-time
                            example: "2025-10-03T00:00:00.000Z"
                          todayEnd:
                            type: string
                            format: date-time
                            example: "2025-10-03T23:59:59.999Z"
                      selectedEvents:
                        type: array
                        items:
                          type: object
                          properties:
                            eventId:
                              type: string
                              example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
                            name:
                              type: string
                              example: "Concert Event"
                            dateOfEventStart:
                              type: string
                              format: date-time
                            dateOfEventEnd:
                              type: string
                              format: date-time
                            hasForecastResult:
                              type: boolean
                              example: true
                            status:
                              type: string
                              example: "CREATED"
                      totalSelectedEvents:
                        type: integer
                        example: 1
                      totalActiveEvents:
                        type: integer
                        example: 60
                  message:
                    type: string
                    example: "Debug information for prediction events"
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: Internal database ID
          example: 1
        userId:
          type: string
          description: External user ID
          example: "usr_123456789"
        email:
          type: string
          format: email
          description: User email address
          example: "john.doe@example.com"
        username:
          type: string
          description: Username (defaults to email)
          example: "john.doe@example.com"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED, PENDING]
          description: User status
          example: "ACTIVE"
        phone:
          type: string
          description: Phone number (optional)
          example: "+1234567890"
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2024-01-01T10:00:00Z"
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2024-01-01T12:00:00Z"

    UserStatistics:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users
          example: 150
        activeUsers:
          type: integer
          description: Number of active users
          example: 120
        inactiveUsers:
          type: integer
          description: Number of inactive users
          example: 20
        suspendedUsers:
          type: integer
          description: Number of suspended users
          example: 10
        pendingUsers:
          type: integer
          description: Number of pending users
          example: 5
        usersWithPhone:
          type: integer
          description: Number of users with phone numbers
          example: 75

    Event:
      type: object
      properties:
        id:
          type: integer
          description: Internal database ID
        eventId:
          type: string
          description: External event ID
          example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
        simulationId:
          type: string
          description: Associated simulation ID
          example: "sim_123456789"
        name:
          type: string
          description: Event name
          example: "Summer Music Festival 2024"
        description:
          type: string
          description: Event description
          example: "Annual outdoor music festival"
        venue:
          type: string
          description: Event venue
          example: "Central Park"
        expectedAttendees:
          type: integer
          description: Expected number of attendees
          example: 5000
        eventDate:
          type: string
          format: date-time
          description: Event date and time
        eventType:
          type: string
          enum: [CONCERT, CONFERENCE, SPORTS, FESTIVAL, OTHER]
          description: Type of event
        s3Keys:
          type: object
          description: S3 file keys for uploaded data
          properties:
            ticketingData:
              type: string
              example: "events/evt_123456789/ticketing-data.csv"
            seatingChart:
              type: string
              example: "events/evt_123456789/seating-chart.json"
        status:
          type: string
          enum: [CREATED, ACTIVE, COMPLETED, CANCELLED]
          description: Event status
        attachmentUrls:
          type: array
          description: Array of attachment URLs for AI chatbot knowledge base
          items:
            type: string
            format: uri
          example: ["https://example.com/event-plan.pdf", "https://example.com/venue-map.jpg"]
        attachmentFilenames:
          type: array
          description: Array of original attachment filenames corresponding to attachment URLs
          items:
            type: string
          example: ["event-plan.pdf", "venue-map.jpg", "eventFlow.csv"]
        attachmentContext:
          type: string
          description: Text interpretation/context of attachments for AI chatbot knowledge base
          example: "Event plan includes detailed schedule and safety protocols. Venue map shows emergency exits and first aid stations."
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        simulation:
          $ref: '#/components/schemas/Simulation'

    Simulation:
      type: object
      properties:
        id:
          type: integer
          description: Internal database ID
        simulationId:
          type: string
          description: External simulation ID
          example: "sim_123456789"
        eventId:
          type: string
          description: Associated event ID
          example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
        status:
          type: string
          enum: [PENDING, RUNNING, COMPLETED, FAILED, CANCELLED]
          description: Simulation status
        parameters:
          type: object
          description: Simulation parameters
          properties:
            crowdDensityThreshold:
              type: number
              example: 0.7
            simulationDuration:
              type: integer
              example: 3600
            weatherConditions:
              type: string
              example: "sunny"
        progress:
          type: object
          description: Simulation progress information
          properties:
            percentage:
              type: number
              minimum: 0
              maximum: 100
              example: 75
            currentStep:
              type: string
              example: "Analyzing crowd patterns"
            estimatedTimeRemaining:
              type: integer
              description: Estimated time remaining in seconds
              example: 300
        results:
          $ref: '#/components/schemas/SimulationResults'
        error:
          type: string
          description: Error message if simulation failed
        startedAt:
          type: string
          format: date-time
          description: Simulation start time
        completedAt:
          type: string
          format: date-time
          description: Simulation completion time
        failedAt:
          type: string
          format: date-time
          description: Simulation failure time
        cancelledAt:
          type: string
          format: date-time
          description: Simulation cancellation time
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        event:
          type: object
          description: Associated event information
          properties:
            eventId:
              type: string
            name:
              type: string
            venue:
              type: string
            eventDate:
              type: string
              format: date-time
            eventType:
              type: string

    SimulationResults:
      type: object
      properties:
        summary:
          type: object
          properties:
            totalAttendees:
              type: integer
              example: 4850
            peakCrowdDensity:
              type: number
              example: 0.85
            averageWaitTime:
              type: number
              example: 12.5
            bottleneckAreas:
              type: array
              items:
                type: string
              example: ["Main Entrance", "Food Court"]
        recommendations:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                example: "rec_001"
              type:
                type: string
                example: "CROWD_CONTROL"
              priority:
                type: string
                enum: [HIGH, MEDIUM, LOW]
                example: "HIGH"
              title:
                type: string
                example: "Deploy Additional Staff at Main Entrance"
              description:
                type: string
                example: "High congestion detected at main entrance"
              estimatedImpact:
                type: string
                example: "Reduce wait time by 60%"
              implementationTime:
                type: string
                example: "10 minutes"
        crowdFlowAnalysis:
          type: object
          properties:
            peakHours:
              type: array
              items:
                type: string
              example: ["18:00-19:00", "20:00-21:00"]
            congestionHotspots:
              type: array
              items:
                type: object
                properties:
                  area:
                    type: string
                  severity:
                    type: string
                  timeFrame:
                    type: string
        riskAssessment:
          type: object
          properties:
            overallRisk:
              type: string
              enum: [LOW, MEDIUM, HIGH, CRITICAL]
              example: "MEDIUM"
            specificRisks:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                  probability:
                    type: number
                  impact:
                    type: string

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalItems:
          type: integer
          example: 95
        itemsPerPage:
          type: integer
          example: 10
        hasNextPage:
          type: boolean
          example: true
        hasPreviousPage:
          type: boolean
          example: false

    ForecastResult:
      type: object
      description: Result from the new AI model forecast endpoint
      properties:
        eventId:
          type: string
          description: Event ID for which the forecast was generated
          example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
        forecastResult:
          type: object
          description: The structured forecast data from the AI model
          properties:
            forecast:
              type: array
              description: Array of gate forecast objects
              items:
                type: object
                properties:
                  gate:
                    type: string
                    description: Gate identifier
                    example: "1"
                  timeFrames:
                    type: array
                    description: Time-based forecast predictions for this gate
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          description: ISO 8601 timestamp for this prediction
                          example: "2025-09-21 14:00:00"
                        predicted:
                          type: integer
                          description: Predicted count (rounded)
                          example: 186
                        lower_bound:
                          type: integer
                          description: Lower bound of prediction (rounded)
                          example: 146
                        upper_bound:
                          type: integer
                          description: Upper bound of prediction (rounded)
                          example: 230
                        dataSource:
                          type: string
                          description: Source of this timeframe data (arrivals = entry rush period, exits = departure rush period, simulation = gap filled with predicted value of 10)
                          enum: ["arrivals", "exits", "simulation"]
                          example: "arrivals"
            metadata:
              type: object
              properties:
                processedAt:
                  type: string
                  format: date-time
                  description: When the response was processed
                modelVersion:
                  type: string
                  description: Version of the AI model used
                  example: "forecast_inout_v1"
                endpoint:
                  type: string
                  description: The AI model endpoint used
                  example: "http://43.216.25.126/forecast_inout"
                totalGates:
                  type: integer
                  description: Total number of gates in forecast
                  example: 3
                timeFrameCount:
                  type: integer
                  description: Number of time frames per gate
                  example: 31
            summary:
              type: object
              properties:
                totalGates:
                  type: integer
                  example: 3
                gates:
                  type: array
                  items:
                    type: string
                  example: ["1", "2", "A"]
                forecastPeriod:
                  type: object
                  properties:
                    start:
                      type: string
                      example: "2025-09-21 11:30:00"
                    end:
                      type: string
                      example: "2025-09-21 15:00:00"
                predictions:
                  type: array
                  items:
                    type: object
                    properties:
                      gate:
                        type: string
                        example: "1"
                      totalTimeFrames:
                        type: integer
                        example: 31
                      peakPrediction:
                        type: integer
                        example: 196
                      avgPrediction:
                        type: integer
                        example: 112
                      dataSources:
                        type: object
                        description: Count of timeframes by data source
                        properties:
                          arrivals:
                            type: integer
                            description: Number of timeframes from arrivals data (entry rush period)
                            example: 13
                          exits:
                            type: integer
                            description: Number of timeframes from exits data (departure rush period)
                            example: 1
                          simulation:
                            type: integer
                            description: Number of timeframes filled with simulation data (predicted value of 10)
                            example: 47
                status:
                  type: string
                  example: "completed"
        generatedAt:
          type: string
          format: date-time
          description: When the forecast was generated
        modelEndpoint:
          type: string
          description: The AI model endpoint that was called
          example: "http://43.216.25.126/forecast_inout"
        inputData:
          type: object
          description: The input data that was sent to the model
          properties:
            gates:
              type: array
              items:
                type: string
              example: ["1", "2", "A"]
            schedule_start_time:
              type: string
              example: "2025-09-21T14:00:00"
            event_end_time:
              type: string
              example: "2025-09-21T16:00:00"
            method_exits:
              type: string
              example: "mirror_delay"
            freq:
              type: string
              example: "5min"

    LegacyForecastResult:
      type: object
      description: Result from the legacy AI model forecast endpoint
      properties:
        eventId:
          type: string
          description: Event ID for which the forecast was generated
          example: "evt_a03bf463-7940-4df0-a612-8e41994784e2"
        forecastResult:
          type: object
          description: The forecast data from the legacy AI model
          properties:
            prediction:
              type: object
              description: Raw prediction data from the legacy model
            metadata:
              type: object
              properties:
                processedAt:
                  type: string
                  format: date-time
                modelVersion:
                  type: string
                  example: "unknown"
                confidence:
                  type: number
                  description: Confidence score of the prediction
                  example: 0.85
            summary:
              type: object
              properties:
                totalAttendance:
                  type: integer
                  example: 5000
                peakHours:
                  type: array
                  items:
                    type: string
                  example: ["18:00", "19:00"]
                congestionRisk:
                  type: string
                  example: "medium"
                highRiskZones:
                  type: array
                  items:
                    type: string
                  example: ["Main Entrance", "Food Court"]
                recommendations:
                  type: array
                  items:
                    type: string
                  example: ["Deploy additional staff at main entrance"]
                confidence:
                  type: number
                  example: 0.85
        generatedAt:
          type: string
          format: date-time
          description: When the forecast was generated
        modelEndpoint:
          type: string
          description: The AI model endpoint that was called
          example: "http://localhost:8080/predict"
        inputData:
          type: object
          description: The input data that was sent to the model

    AttachmentUpload:
      type: object
      description: Details of an uploaded attachment file
      properties:
        key:
          type: string
          description: S3 object key for the uploaded file
          example: "events/evt_123456789/attachments/1699123456789_event-schedule.txt"
        signedUrl:
          type: string
          format: uri
          description: Signed S3 URL for secure access (7-day expiration)
          example: "https://your-bucket.s3.us-east-1.amazonaws.com/events/evt_123456789/attachments/1699123456789_event-schedule.txt?X-Amz-Algorithm=..."
        publicUrl:
          type: string
          format: uri
          description: Public S3 URL (requires authentication)
          example: "https://your-bucket.s3.us-east-1.amazonaws.com/events/evt_123456789/attachments/1699123456789_event-schedule.txt"
        originalName:
          type: string
          description: Original filename as uploaded
          example: "event-schedule.txt"
        mimeType:
          type: string
          description: MIME type of the uploaded file
          example: "text/plain"
        size:
          type: integer
          description: File size in bytes
          example: 2048
        uploadedAt:
          type: string
          format: date-time
          description: When the file was uploaded
          example: "2023-11-04T12:30:56.789Z"

    AttachmentAnalysis:
      type: object
      description: AI analysis results for an uploaded attachment
      properties:
        fileName:
          type: string
          description: Original filename
          example: "event-schedule.txt"
        fileType:
          type: string
          description: File MIME type
          example: "text/plain"
        contentLength:
          type: integer
          description: Length of extracted content
          example: 2048
        sentiment:
          type: object
          description: Sentiment analysis results
          properties:
            sentiment:
              type: string
              enum: [POSITIVE, NEGATIVE, NEUTRAL, MIXED]
              example: "NEUTRAL"
            confidence:
              type: number
              minimum: 0
              maximum: 1
              example: 0.95
        entities:
          type: array
          description: Named entities found in the content
          items:
            type: object
            properties:
              text:
                type: string
                example: "Dr. Sarah Johnson"
              type:
                type: string
                enum: [PERSON, LOCATION, ORGANIZATION, DATE, QUANTITY, OTHER]
                example: "PERSON"
              score:
                type: number
                minimum: 0
                maximum: 1
                example: 0.94
        keyPhrases:
          type: array
          description: Key phrases extracted from content
          items:
            type: object
            properties:
              text:
                type: string
                example: "event schedule"
              score:
                type: number
                minimum: 0
                maximum: 1
                example: 0.92
        eventRelevance:
          type: object
          description: Assessment of content relevance to event planning
          properties:
            score:
              type: number
              minimum: 0
              maximum: 1
              description: Relevance score (0-1)
              example: 0.95
            level:
              type: string
              enum: [HIGH, MEDIUM, LOW]
              description: Relevance level
              example: "HIGH"
            matchedKeywords:
              type: array
              items:
                type: string
              example: ["event", "schedule", "conference", "venue"]
        keyInformation:
          type: array
          description: High-confidence information items for AI queries
          items:
            type: object
            properties:
              type:
                type: string
                enum: [entity, key_phrase, date, contact]
                example: "entity"
              category:
                type: string
                example: "PERSON"
              text:
                type: string
                example: "Dr. Sarah Johnson"
              confidence:
                type: number
                minimum: 0
                maximum: 1
                example: 0.94
              importance:
                type: string
                enum: [high, medium, low]
                example: "high"
        actionableInsights:
          type: array
          description: Actionable recommendations for event planning
          items:
            type: object
            properties:
              type:
                type: string
                example: "stakeholder_identification"
              priority:
                type: string
                enum: [high, medium, low]
                example: "medium"
              message:
                type: string
                example: "5 people identified - consider adding to event contact list"
              category:
                type: string
                example: "stakeholder_management"
              details:
                type: array
                items:
                  type: string
                example: ["Dr. Sarah Johnson", "Alex Rodriguez", "John Smith"]
        aiReadyContext:
          type: string
          description: Formatted context optimized for AI agent consumption
          example: |
            === AI AGENT CONTEXT FOR: event-schedule.txt ===
            
            QUICK FACTS:
            • Document type: text document
            • Content length: 2048 characters
            • Language: en
            • Tone: NEUTRAL (95% confidence)
            • Event relevance: HIGH
            
            KEY INFORMATION FOR AI QUERIES:
            • PERSON: Dr. Sarah Johnson, Alex Rodriguez, John Smith
            • LOCATION: Conference Room A, Conference Room B, Workshop Room 1
            • Key topics: event schedule, AI Technology Summit, crowd management
            • Important dates: December 15-16, 2023
            • Contact information: events@techsummit.com
        searchableKeywords:
          type: array
          description: Keywords for efficient content retrieval
          items:
            type: string
          example: ["event", "schedule", "conference", "ai", "technology", "summit", "venue", "speaker", "workshop", "networking"]
        contextSummary:
          type: string
          description: Human-readable summary of the analysis
          example: |
            DOCUMENT: event-schedule.txt
            
            CONTENT OVERVIEW:
            - Length: 2048 characters
            - Language: en
            - Overall tone: neutral
            - Main topics: event schedule, AI Technology Summit, crowd management
            - Event relevance: HIGH (95%)
            - Important dates: December 15-16, 2023
            - Contact emails: events@techsummit.com
        analyzedAt:
          type: string
          format: date-time
          description: When the analysis was performed
          example: "2023-11-04T12:31:00.000Z"

    SupportedFileTypes:
      type: object
      description: Information about supported file types and processing capabilities
      properties:
        fullySupported:
          type: object
          description: File types with full processing support
          additionalProperties:
            type: string
          example:
            "text/plain": "Plain text files (.txt) - Direct text extraction with content analysis"
            "text/csv": "Comma-separated values (.csv) - Structured data extraction with analysis"
            "application/pdf": "PDF documents (.pdf) - Full text extraction with metadata"
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document": "Word documents (.docx) - Complete text extraction"
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": "Excel spreadsheets (.xlsx) - Multi-worksheet data extraction"
            "image/jpeg": "JPEG images (.jpg, .jpeg) - OCR text extraction with AWS Textract"
            "image/png": "PNG images (.png) - OCR text extraction with AWS Textract"
        partiallySupported:
          type: object
          description: File types with limited support
          additionalProperties:
            type: string
          example:
            "application/msword": "Legacy Word documents (.doc) - Limited support, convert to .docx recommended"
            "image/gif": "GIF images (.gif) - Not supported by AWS Textract, convert to JPEG/PNG"
        maxFileSize:
          type: string
          description: Maximum file size allowed
          example: "50MB (10MB for images due to AWS Textract limits)"
        processingCapabilities:
          type: object
          description: Detailed processing capabilities by file type
          properties:
            pdf:
              type: object
              properties:
                features:
                  type: array
                  items:
                    type: string
                  example: ["Full text extraction", "Metadata extraction", "Multi-page support"]
                metadata:
                  type: array
                  items:
                    type: string
                  example: ["Title", "Author", "Subject", "Creator", "Producer", "Creation/Modification dates"]
            excel:
              type: object
              properties:
                features:
                  type: array
                  items:
                    type: string
                  example: ["Multi-worksheet support", "Structured data extraction", "Cell formatting preservation"]
                formats:
                  type: array
                  items:
                    type: string
                  example: ["Tab-separated values", "Worksheet metadata", "Range information"]
            images:
              type: object
              properties:
                features:
                  type: array
                  items:
                    type: string
                  example: ["OCR text extraction", "Table detection", "Form field extraction", "Confidence scoring"]
                services:
                  type: array
                  items:
                    type: string
                  example: ["AWS Textract for advanced document analysis"]
                limitations:
                  type: array
                  items:
                    type: string
                  example: ["JPEG and PNG only", "10MB size limit", "Requires good image quality"]
        recommendations:
          type: array
          description: Best practices for file uploads
          items:
            type: string
          example:
            - "For best AI analysis results, ensure text is clearly readable and well-structured"
            - "PDF and Word documents provide rich metadata for context"
            - "Excel files are processed as structured data with worksheet separation"
            - "Images should have high contrast and horizontal text for best OCR results"
        aiOptimization:
          type: array
          description: AI-specific optimizations
          items:
            type: string
          example:
            - "All extracted content includes metadata headers for better AI context"
            - "Structured data (tables, forms) is preserved in readable format"
            - "File type and extraction method information is included"
            - "Error messages provide clear guidance for unsupported formats"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

  responses:
    BadRequest:
      description: Bad request - validation errors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Validation failed"
            code: "VALIDATION_ERROR"
            details:
              - field: "expectedAttendees"
                message: "Expected attendees must be a positive number"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Event not found"
            code: "NOT_FOUND"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Internal server error"
            code: "INTERNAL_ERROR"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

security:
  - ApiKeyAuth: []

tags:
  - name: System
    description: System health and information endpoints
  - name: Users
    description: User account management operations
  - name: Events
    description: Event management operations
  - name: Simulations
    description: AI simulation operations
  - name: Forecast
    description: AI-powered crowd forecasting operations
