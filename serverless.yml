service: event-ai-server

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 30
  versionFunctions: false
  
  # Environment variables
  environment:
    NODE_ENV: ${self:provider.stage}
    LOG_LEVEL: ${env:LOG_LEVEL, 'info'}
    DATABASE_URL: ${env:DATABASE_URL}
    S3_BUCKET_NAME: ${env:S3_BUCKET_NAME}
    SAGEMAKER_ENDPOINT_NAME: ${env:SAGEMAKER_ENDPOINT_NAME}
    AI_MODEL_API_URL: ${env:AI_MODEL_API_URL}
    AI_MODEL_API_KEY: ${env:AI_MODEL_API_KEY}
    N8N_WEBHOOK_URL: ${env:N8N_WEBHOOK_URL}
    WHATSAPP_API_URL: ${env:WHATSAPP_API_URL}
    WHATSAPP_API_KEY: ${env:WHATSAPP_API_KEY}
    NOTIFICATION_RECIPIENTS: ${env:NOTIFICATION_RECIPIENTS}
    JWT_SECRET: ${env:JWT_SECRET}
    RATE_LIMIT: ${env:RATE_LIMIT, '100'}
    ALLOWED_ORIGINS: ${env:ALLOWED_ORIGINS}
    REQUEST_TIMEOUT: ${env:REQUEST_TIMEOUT, '30000'}
  
  # IAM Role permissions
  iam:
    role:
      statements:
        # S3 permissions
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${env:S3_BUCKET_NAME}
            - arn:aws:s3:::${env:S3_BUCKET_NAME}/*
        
        # SageMaker permissions
        - Effect: Allow
          Action:
            - sagemaker:InvokeEndpoint
          Resource:
            - arn:aws:sagemaker:${self:provider.region}:*:endpoint/${env:SAGEMAKER_ENDPOINT_NAME}
        
        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource:
            - arn:aws:logs:${self:provider.region}:*:*
        
        # VPC permissions (if using VPC)
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
          Resource: "*"

  # API Gateway configuration
  apiGateway:
    restApiId: ${env:API_GATEWAY_ID, ''}
    restApiRootResourceId: ${env:API_GATEWAY_ROOT_RESOURCE_ID, ''}
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    
    # CORS configuration
    cors:
      origin: ${env:ALLOWED_ORIGINS, 'http://localhost:3000'}
      headers:
        - Content-Type
        - X-Amz-Date
        - Authorization
        - X-Api-Key
        - X-Amz-Security-Token
        - X-Amz-User-Agent
        - X-Request-ID
      allowCredentials: true

  # VPC configuration (uncomment if using VPC)
  # vpc:
  #   securityGroupIds:
  #     - ${env:SECURITY_GROUP_ID}
  #   subnetIds:
  #     - ${env:SUBNET_ID_1}
  #     - ${env:SUBNET_ID_2}

functions:
  api:
    handler: src/handler.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
      - http:
          path: /
          method: ANY
          cors: true
    
    # Reserved concurrency (optional)
    reservedConcurrency: 10
    
    # Provisioned concurrency for better performance (optional)
    # provisionedConcurrency: 2
    
    # Environment-specific overrides
    environment:
      STAGE: ${self:provider.stage}

# Custom resources
resources:
  Resources:
    # S3 Bucket for file storage
    EventAIStorageBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:S3_BUCKET_NAME}
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"
              MaxAge: 3000
    
    # CloudWatch Log Group
    EventAILogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/event-ai-server-${self:provider.stage}
        RetentionInDays: 14

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:service}-${self:provider.stage}-restApiId
    
    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:service}-${self:provider.stage}-rootResourceId
    
    S3BucketName:
      Value:
        Ref: EventAIStorageBucket
      Export:
        Name: ${self:service}-${self:provider.stage}-s3BucketName

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  # Serverless Offline configuration
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    corsAllowOrigin: ${env:ALLOWED_ORIGINS, 'http://localhost:3000'}
    corsAllowHeaders: 'accept,content-type,x-api-key,authorization,x-request-id'
    corsAllowCredentials: true
  
  # Environment-specific settings
  stages:
    dev:
      logLevel: debug
    staging:
      logLevel: info
    prod:
      logLevel: warn

